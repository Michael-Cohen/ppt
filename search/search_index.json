{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ppt (package pptm) Documentation : https://Michael-Cohen.github.io/ppt Source Code : https://github.com/Michael-Cohen/ppt PyPI : https://pypi.org/project/pptm/ A short description of the project Installation pip install pptm Development Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell Testing pytest Documentation The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically as part each release. Releasing Trigger the Draft release workflow (press Run workflow ). This will update the changelog & version and create a GitHub release which is in Draft state. Find the draft release from the GitHub releases and publish it. When a release is published, it'll trigger release workflow which creates PyPI release and deploys updated documentation. Pre-commit Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. Install pre-commit with: poetry add pre-commit You can then install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files This project was generated using the wolt-python-package-cookiecutter template.","title":"Introduction"},{"location":"#ppt-package-pptm","text":"Documentation : https://Michael-Cohen.github.io/ppt Source Code : https://github.com/Michael-Cohen/ppt PyPI : https://pypi.org/project/pptm/ A short description of the project","title":"ppt (package pptm)"},{"location":"#installation","text":"pip install pptm","title":"Installation"},{"location":"#development","text":"Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell","title":"Development"},{"location":"#testing","text":"pytest","title":"Testing"},{"location":"#documentation","text":"The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically as part each release.","title":"Documentation"},{"location":"#releasing","text":"Trigger the Draft release workflow (press Run workflow ). This will update the changelog & version and create a GitHub release which is in Draft state. Find the draft release from the GitHub releases and publish it. When a release is published, it'll trigger release workflow which creates PyPI release and deploys updated documentation.","title":"Releasing"},{"location":"#pre-commit","text":"Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. Install pre-commit with: poetry add pre-commit You can then install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files This project was generated using the wolt-python-package-cookiecutter template.","title":"Pre-commit"},{"location":"api_docs/","text":"API documentation salut say_hello_with_message ( m : str ) -> str Awesome function to say hello with message. Parameters: Name Type Description Default msg str The message of your dreams. required Returns: Name Type Description str str The standard sentence with your message. Source code in pptm/salut.py 4 5 6 7 8 9 10 11 12 13 def say_hello_with_message ( m : str ) -> str : \"\"\"Awesome function to say hello with message. Args: msg (str): The message of your dreams. Returns: str: The standard sentence with your message. \"\"\" return f \"hello, the message is: { m } \" wow ( quantity : float ) -> str Diplays a Numpy array with one element. Source code in pptm/salut.py 16 17 18 def wow ( quantity : float ) -> str : \"\"\"Diplays a Numpy array with one element.\"\"\" return f \"Numpy result: { np . array ([ quantity ]) } \"","title":"API documentation"},{"location":"api_docs/#api-documentation","text":"","title":"API documentation"},{"location":"api_docs/#pptm.salut","text":"","title":"salut"},{"location":"api_docs/#pptm.salut.say_hello_with_message","text":"Awesome function to say hello with message. Parameters: Name Type Description Default msg str The message of your dreams. required Returns: Name Type Description str str The standard sentence with your message. Source code in pptm/salut.py 4 5 6 7 8 9 10 11 12 13 def say_hello_with_message ( m : str ) -> str : \"\"\"Awesome function to say hello with message. Args: msg (str): The message of your dreams. Returns: str: The standard sentence with your message. \"\"\" return f \"hello, the message is: { m } \"","title":"say_hello_with_message()"},{"location":"api_docs/#pptm.salut.wow","text":"Diplays a Numpy array with one element. Source code in pptm/salut.py 16 17 18 def wow ( quantity : float ) -> str : \"\"\"Diplays a Numpy array with one element.\"\"\" return f \"Numpy result: { np . array ([ quantity ]) } \"","title":"wow()"},{"location":"changelog/","text":"Changelog v0.1.2 (2023-02-18) Fix Changed trigger event ( de4f35a ) v0.1.1 (2023-02-18) Fix Random change ( 5dc5c76 ) v0.1.0 (2023-02-18) Feature Added build_and_release ( 506144b ) Fix Added bump version token ( 9a6edd3 ) Add jobs mention ( ff33520 ) Removed unrelevant block ( 8cdcf57 )","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v012-2023-02-18","text":"","title":"v0.1.2 (2023-02-18)"},{"location":"changelog/#fix","text":"Changed trigger event ( de4f35a )","title":"Fix"},{"location":"changelog/#v011-2023-02-18","text":"","title":"v0.1.1 (2023-02-18)"},{"location":"changelog/#fix_1","text":"Random change ( 5dc5c76 )","title":"Fix"},{"location":"changelog/#v010-2023-02-18","text":"","title":"v0.1.0 (2023-02-18)"},{"location":"changelog/#feature","text":"Added build_and_release ( 506144b )","title":"Feature"},{"location":"changelog/#fix_2","text":"Added bump version token ( 9a6edd3 ) Add jobs mention ( ff33520 ) Removed unrelevant block ( 8cdcf57 )","title":"Fix"}]}