name: Build and release

on:
  # Note: Only triggers a workflow run if the workflow file is on the default branch ('main').
  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  workflow_run:
    # Set the trigger workflow:
    workflows: [ "Test" ]
    # Set the trigger branch:
    branches: [ main ]
    # Set the trigger activity (regardless of the workflow success ):
    types: [ completed ]
  # push:
  #   branches: [ main ]
  # Allow this workflow to be run manually:
  # workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # Only run if (a) "Test" workflow was successful, and (b) main branch, and (c) push event:
    # Warning that "&& (github.event_name == 'push')" skips this job on PR events.
    if: ${{ (github.event.workflow_run.conclusion == 'success') && (github.ref == 'refs/heads/main') }}
    steps:
      # Check-out the repository so that the job can access it and set up Python:
      - uses: actions/checkout@v3
        # For semantic-release to work, access all the Git history:
        with:
          fetch-depth: 0
      # Set up Python, install Poetry and install package:
      - uses: ./.github/actions/python-poetry-env

      # if the repository is part of an organization, you can select "Restrict who can dismiss pull request reviews".
      # See: https://www.paulmowat.co.uk/blog/resolve-github-action-gh006-protected-branch-update-failed/.
      # In other cases, remove branch protection.
      - name: Use Python Semantic Release to prepare release
        id: semantic-release-publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PAT: ${{ secrets.BUMP_VERSION_TOKEN }}
        # See: https://python-semantic-release.readthedocs.io/en/latest/#semantic-release-publish
        run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            echo "next_pkg_version='$(semantic-release print-version)'" >> "$GITHUB_OUTPUT"

            if [ -z "$next_pkg_version" ]; then echo "next_pkg_version is equal to empty string"; else echo "warning: next_pkg_version is equal to $next_pkg_version"; fi
            
            poetry run semantic-release publish

      - name: Test install from GitHub
        run: |
            new_pkg_version="$(poetry version | awk -F '[ =]+' '{print $2}')"
            pip install "git+https://github.com/Michael-Cohen/ppt.git@v$new_pkg_version"

      - name: Distribute to pypi
        if: ${{ steps.semantic-release-publish.outputs.next_pkg_version != '' }}
        run: |
          
          x=${{ steps.semantic-release-publish.outputs.next_pkg_version }}
          if [ -z "$x" ]; then echo "next_pkg_version is equal to empty string"; else echo "WARNING: next_pkg_version is equal to: $x"; fi
          
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish --build --no-interaction

      - name: Deploy docs
        if: ${{ steps.semantic-release-publish.outputs.next_pkg_version != '' }}
        env:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        run: poetry run mkdocs gh-deploy --force
